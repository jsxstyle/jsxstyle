{
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "styleGroups": {
      "description": "array of style prop objects",
      "type": "array",
      "items": {
        "type": "object"
      }
    },
    "namedStyleGroups": {
      "description": "object of style prop objects keyed by className",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "whitelistedModules": {
      "description": "array of absolute paths to modules that should be considered static",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "(^/|^[a-zA-Z]:\\\\)"
      }
    },
    "parserPlugins": {
      "description": "array of plugins that should be passed to @babel/parser. You can see a full list of available plugins here: https://new.babeljs.io/docs/en/next/babel-parser.html#plugins",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          }
        ]
      }
    },
    "classNameFormat": {
      "description": "format of generated class names. `hash` is deterministic, `base36` is not.",
      "enum": [
        "hash",
        "base36"
      ]
    },
    "evaluateVars": {
      "description": "whether or not to evaluate style props that contain variables",
      "type": "boolean"
    },
    "cssModules": {
      "description": "if set to true, output CSS classes will be prefixed with `:global` in order to avoid being hashed by css-loader",
      "type": "boolean"
    },
    "cacheFile": {
      "description": "absolute path to a file that contains a list of CSS strings. If cacheFile is set, the file will be created if it does not exist will be overwritten every time jsxstyle-webpack-plugin runs.",
      "type": "string",
      "pattern": "(^/|^[a-zA-Z]:\\\\)"
    }
  }
}
