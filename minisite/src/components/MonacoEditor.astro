---
import { Box, type JsxstyleComponentStyleProps } from "@jsxstyle/astro";

interface Props extends JsxstyleComponentStyleProps {}
---

<Box {...Astro.props} props={{ id: "code-preview" }}>
  <Box padding={20}>Loadingâ€¦</Box>
</Box>

<script>
  const { monaco } = await import("./customMonaco");
  import editorWorker from "monaco-editor/esm/vs/editor/editor.worker?worker";
  import jsonWorker from "monaco-editor/esm/vs/language/json/json.worker?worker";
  import typescriptWorker from "monaco-editor/esm/vs/language/typescript/ts.worker?worker";
  import { initialSampleCode } from "./initialSampleCode";

  self.MonacoEnvironment = {
    async getWorker(_workerId, label) {
      switch (label) {
        case "typescript": {
          return new typescriptWorker();
        }
        case "json": {
          return new jsonWorker();
        }
        default: {
          return new editorWorker();
        }
      }
    },
  };

  const editorElement = document.getElementById("code-preview")!;
  // remove loading state
  editorElement.replaceChildren();

  const darkModeMq = window.matchMedia(
    "screen and (prefers-color-scheme: dark)",
  );
  darkModeMq.addEventListener("change", (e) => {
    editor.updateOptions({ theme: e.matches ? "vs-dark" : "vs" });
  });

  const theme = darkModeMq.matches ? "vs-dark" : "vs";

  const editor = monaco.editor.create(editorElement, {
    scrollBeyondLastLine: true,
    minimap: {
      enabled: true,
    },
    fontSize: 16,
    language: "typescript",
    theme,
    wordWrap: "on",
    wrappingIndent: "indent",
    wrappingStrategy: "advanced",
  });

  const model = monaco.editor.createModel(
    initialSampleCode,
    "typescript",
    monaco.Uri.file("exampleSchema.tsx"),
  );
  editor.setModel(model);

  editor.onDidChangeModelContent(() => {
    const value = editor.getValue() || "";
    window.sessionStorage.setItem("code", value);
  });

  const resizeObserver = new ResizeObserver((entries) => {
    for (const entry of entries) {
      if (entry.target === editorElement) {
        editor.layout();
        break;
      }
    }
  });

  resizeObserver.observe(editorElement);
</script>
